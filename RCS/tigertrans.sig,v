head	1.2;
access;
symbols;
locks
	enrique:1.2; strict;
comment	@# @;


1.2
date	2006.11.16.22.49.49;	author enrique;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.04.16.08.10;	author enrique;	state Exp;
branches;
next	;


desc
@Signatura de tigertrans
@


1.2
log
@Signatura de Tigertranslate.
@
text
@signature tigertrans = sig

type level
type access
type  frag=tigerframe.frag
val outermost : level
val newLevel : level * string * bool list -> level
val formals : level -> access list
val getActualLev : unit -> int
val allocArg : level -> bool -> access
val allocLocal : level -> bool -> access

type exp
val varDec:exp*exp->tigertree.stm
val imprime:exp->unit
val procEntryExit : {level: level, body: exp} -> unit 
val getResult : unit -> frag list
val unitExp : unit -> exp
val nilExp : unit -> exp
val intExp : int -> exp
val stringExp : string -> exp 
val simpleVar : access * int -> exp
(* val varDec : access -> exp *)
val fieldVar : exp * int -> exp 
val subscriptVar : exp * exp -> exp
val recordExp : exp  list -> exp (* Antes el tipo era de (exp * int) list *)
val callExp : string * bool * level * exp list * bool-> exp 
val letExp : tigertree.stm list * exp -> exp 
val breakExp : unit -> exp
val seqExp : exp list -> exp
val preWhileFor : unit -> unit
val postWhileFor : unit -> unit 
val whileExp : exp * exp -> exp
val forExp : exp * exp * exp * exp -> exp
val ifThenExp : exp * exp -> exp
val ifThenElseExp : exp * exp * exp -> exp 
val ifThenElseExpUnit :exp * exp * exp  -> exp 
val assignExp : exp * exp -> exp
val preFunctionDec : level * string -> level 
val functionDec : exp * level * bool -> exp
val postFunctionDec : unit -> unit 
val binOpIntExp : exp * tigerabs.oper * exp -> exp
val binOpIntExpEq : exp * tigerabs.oper * exp -> exp
val binOpStrExp : exp * tigerabs.oper * exp -> exp 
val arrayExp : exp * exp -> exp 

val Ir : frag list -> string

end
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
type frag
d7 1
a7 2
(*val newLevel : {parent: level, name: tigertemp.label,
				formals: bool list} -> level*)
d14 3
a16 2
val ningun: unit ->exp
(*val procEntryExit : {level: level, body: exp} -> unit*)
d21 4
a24 4
val stringExp : string -> exp
(*val simpleVar : access * int -> exp
val varDec : access -> exp
val fieldVar : exp * int -> exp
d26 3
a28 3
val recordExp : (exp * int) list -> exp
val callExp : tigertemp.label * bool * bool * level * exp list -> exp
val letExp : exp list * exp -> exp
d30 1
a30 1
val seqExp : exp list -> exp*)
d32 8
a39 8
val postWhileFor : unit -> unit (*
val whileExp : {test: exp, body: exp} -> exp
val forExp : {lo: exp, hi: exp, var: exp, body: exp} -> exp
val ifThenExp : {test: exp, then': exp} -> exp
val ifThenElseExp : {test: exp, then': exp, else': exp} -> exp
val ifThenElseExpUnit : {test: exp, then': exp, else': exp} -> exp
val assignExp : {var: exp, exp:exp}-> exp
val preFunctionDec : level * string -> level
d41 5
a45 4
val postFunctionDec : unit -> unit
val binOpIntExp : {left:exp, oper:tigerabs.oper, right:exp} -> exp
val binOpStrExp : {left:exp, oper:tigerabs.oper, right:exp} -> exp
val arrayExp : {size: exp, init: exp} -> exp*)
@

head	1.5;
access;
symbols;
locks
	enrique:1.5; strict;
comment	@# @;


1.5
date	2007.06.01.21.39.09;	author enrique;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.30.12.18.13;	author enrique;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.20.13.40.56;	author enrique;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.18.12.57.06;	author enrique;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.16.22.51.07;	author enrique;	state Exp;
branches;
next	;


desc
@Generador de assembler para Tiger.
@


1.5
log
@Versión 1.5 de tigercodegen. En esta versión modifiqué el assember de Add, debido  a que se produce un error cuando coalesce el temporal destino y el fuente, cuando el destino está "spilleado". Después de dicha modificación, anduvo bien, pero ahora surgen problemas con la  resta.
@
text
@structure tigercodegen :> tigercodegen =
struct 
			
			open tigertemp
			open tigertree
			open tigerassem
			open tigerframe
		
			fun codegen (frame, stm: tigertree.stm) :tigerassem.instr list = 
			let val ilist = ref (nil:tigerassem.instr list)
					fun emit x = ilist := x :: !ilist
					fun result(gen) = let val t = newtemp() in gen t; t end
					fun itoa i = (if i < 0 then "-" else "")^(Int.toString(Int.abs(i))) 
					fun relOp relop =
							(case relop of 
										EQ => "je"
									|	NE => "jne"
									|	LT => "jl"
									| GT => "jg"
									| LE => "jle"
									| GE => "jge"
									| ULT => "jb"
									| ULE => "jbe"
									| UGT => "ja"
									| UGE => "jae")
					fun scaleFact n = n=0 orelse n=1 orelse n=2 orelse n=3
					fun sF n = 
						case n of
 						0 => 1
						|1 => 2
						|2 => 4
						|3 => 8
						| _ => raise Fail "Conversión a factor incorrecta.\n"
					fun munchStm(SEQ(a, b)) = (munchStm a; munchStm b)
						| munchStm(tigertree.MOVE(TEMP e1, MEM(BINOP (PLUS, TEMP e2, CONST i)))) =
								emit(OPER {assem = "movl "^itoa(i)^"(%`s0), %`d0 #0\n", 
															src=[e2],
															dst=[e1], jump=NONE})		
						| munchStm(tigertree.MOVE(TEMP e1, BINOP (PLUS, TEMP e2, CONST i))) =
								let 
									val tmp = newtemp()
								in
								(emit(OPER{assem= "movl %`s0, %`d0 \n",
											src = [e2], dst = [tmp], jump=NONE});
								 emit(OPER {assem = "addl $"^itoa(i)^", %`d0 \n",
											src = [], dst = [tmp], jump=NONE});
								 emit(OPER {assem = "movl %`s0, %`d0 #0' \n", 
															src=[tmp],
															dst=[e1],jump=NONE}))		
								end
						| munchStm(tigertree.MOVE (MEM (BINOP (PLUS, e1, CONST i)), e2)) =
								emit(OPER {assem = "movl %`s0, "^itoa(i)^"(%`s1) #1\n",
															src = [munchExp e2, munchExp e1], 
															dst = [], jump=NONE})
						| munchStm(tigertree.MOVE(MEM(e1), MEM(e2))) =
								let 
										val tmp = newtemp()
								in
										(emit(OPER {assem = "movl (%`s0), %`d0 #2\n",
																src = [munchExp e2], dst = [tmp], jump=NONE});
										emit(OPER {assem = "movl %`s0, (%`s1) #3\n",
																src = [tmp, munchExp e1], dst = [], jump=NONE})) 
										end 
						| munchStm(tigertree.MOVE (MEM(e1), CONST i)) =
								emit(OPER {assem = "movl $"^itoa(i)^", (%`s0) #4\n", 
														src = [munchExp e1],
														dst = [], jump=NONE})
						| munchStm(tigertree.MOVE (MEM(e1), e2)) =
								emit(OPER {assem = "movl %`s0, (%`s1) #5\n",
														src = [munchExp e2, munchExp e1], 
														dst = [], jump=NONE})
						| munchStm(tigertree.MOVE (TEMP r, CONST i)) = 
								emit(OPER {assem = "movl $"^itoa(i)^", %`d0 #6\n",
														src = [], dst = [r], jump=NONE})
						| munchStm(tigertree.MOVE (TEMP i, NAME l)) =
								emit(OPER {assem = "movl $"^labelAstring(l)^", %`d0 #7\n",
											src = [], dst =[i], jump = NONE})
						| munchStm(tigertree.MOVE (e1, TEMP i)) =
									emit(OPER {assem = "movl %`s0, %`d0 #8\n",
											src = [i], dst = [ munchExp e1], jump=NONE})
						| munchStm(tigertree.MOVE (TEMP i, e2)) =
								emit(MOVE {assem = "movl %`s0, %`d0 #9\n",
														src = munchExp e2,
														dst = i})
						| munchStm(EXP(CALL(NAME n, args))) =
							(emit(OPER {assem = "call "^labelAstring(n)^" #10\n",
										src = munchArgs((List.length args),  rev args), dst = callersaves, jump=NONE});
							if(List.length args > 0) then 
									emit(OPER {assem = "addl $"^itoa(List.length args * wSz)^" ,%esp #11\n",
												src = [], dst = [], jump=NONE})
							else ())
						| munchStm(EXP(CALL(e, args))) =
							(emit(OPER {assem = "call %`s0 #12\n",
										src =munchExp e::munchArgs((List.length args),  rev args), dst = callersaves, jump=NONE});
							if(List.length args > 0) then 
									emit(OPER {assem = "addl $"^itoa(List.length args * wSz)^" ,%esp #13\n",
												src = [], dst = [], jump=NONE})
							else ())
						| munchStm(EXP e) = (munchExp e; ())
						| munchStm (JUMP (NAME e,l)) =
							emit(OPER {assem = "jmp "^labelAstring(e)^" #14\n",
										src = [], dst = [], jump=SOME l})
						| munchStm (CJUMP (relop, e1,	e2, lt, lf))=
							let val () = emit(OPER{assem = "cmpl %`s0, %`s1 #15\n",
													src = [munchExp e2, munchExp e1], dst = [], jump=NONE})
							in
  								emit(OPER{assem = relOp(relop)^" "^labelAstring(lt)^" #16\n",
												src = [], dst = [], jump=SOME [lt]})
							end 
						| munchStm(tigertree.LABEL  lab) =
								emit (LABEL {assem = labelAstring(lab)^": #17\n", lab=lab}) 
						| munchStm _ = raise Fail "¡MunchStm incompleto!"
					and saveCallerSaves() =
						let fun emitcdefs s =
								emit (OPER{assem = "pushl %`s0 #18\n",
											src = [s], dst = [], jump=NONE})
						in
								List.map emitcdefs (tigerframe.callersaves)
						end
					and restoreCallerSaves() =
						let fun emitcdefs s =
								emit (OPER{assem = "popl %`s0 #19\n",
											src = [s], dst = [], jump=NONE})
						in 
								List.app emitcdefs (rev tigerframe.callersaves)
					end
					and  munchArgs(_, []) = []
						| munchArgs(i, h::t) =
							let val (instr, e) =
									case h of 
									TEMP t => (OPER{assem="pushl %`s0 #20\n", src=[t], dst=[], jump=NONE}, "")
										(*	(OPER {assem = "movl %`s0, "^itoa(i * wSz)^"(%esp)\n",
														src = [t], dst = [], jump=NONE}, "") *)
									| CONST t => (OPER{assem="pushl $"^itoa(t)^" #21\n", src=[], dst=[], jump=NONE}, "") 
												(*(OPER {assem = "movl $"^itoa(t)^", "^itoa(i * wSz)^"(%esp)\n",
														src = [], dst = [], jump=NONE}, "")*)
									| _ => 	let val e = munchExp h
													in
														(OPER {assem = "pushl %`s0  #22\n",
														src =[e], dst = [], jump=NONE}, "") 
													end
							in
								(emit(instr);
								if e<> "" then (stringAtemp e)::munchArgs(i-1, t) else munchArgs(i-1,t))
							end
					and  munchExp(ESEQ(s, e)) = (munchStm s; munchExp e)
						| munchExp(MEM(BINOP(PLUS, e, CONST i))) =
								result(fn r =>emit(OPER
												{assem = "movl "^itoa(i)^"(%`s0), %`d0 #22'\n",
													dst = [r], src = [munchExp e], jump=NONE})) 
						| munchExp(MEM(e1)) =
								result(fn r => emit(OPER 
														{assem = "movl (%`s0), %`d0 #23\n",
															src = [munchExp e1], dst = [r], jump=NONE}))
						| munchExp(BINOP(PLUS, CONST i, CONST j)) =
								result (fn r => (emit(OPER 	
														{assem = "movl $"^itoa(i+j)^" ,%`d0 #24\n",
															src =[], dst =[r], jump=NONE})))
						| munchExp(BINOP(PLUS, e1, CONST i)) =
								result (fn r => (emit(MOVE
														{assem = "movl %`s0, %`d0 #25\n",
															src = munchExp e1, dst = r});
																	emit(OPER
														{assem = "addl $"^itoa(i)^" , %`d0 #26\n",
															src =[], dst =[r], jump=NONE})))
						| munchExp(BINOP(PLUS, e1, e2)) =
								result (fn r => (emit(OPER 
														{assem = "movl %`s0, %`d0 #27\n",
															src = [munchExp e1], dst=[r],jump = NONE});
														emit(OPER 
														{assem = "addl %`s0, %`d0 #28\n",
															src = [munchExp e2, r], dst=[r], jump=NONE})))
						| munchExp(BINOP(MINUS, e1, e2)) =
								result(fn r => (emit(MOVE
														{assem = "movl %`s0, %`d0 #29\n",
															src = munchExp e1, dst = r});
														emit(OPER
														{assem = "subl %`s0, %`d0 #30\n",
														src = [munchExp e2, r], dst = [r], jump=NONE}))) 
						| munchExp(BINOP(MUL, e1, e2)) = 
								result(fn r => (emit(MOVE 
														{assem = "movl %`s0, %`d0 #31\n",
														src = munchExp e2, dst = r});
														emit(OPER{assem="imul %`s0, %`d0 #32\n",
														src = [munchExp e1, r], dst = [r], jump=NONE}))) 
						| munchExp(BINOP(DIV, e1, e2)) = 
								result(fn r => (emit(MOVE 
														{assem = "movl %`s0, %`d0 #33\n",
														src = munchExp e1, dst = rv});
														emit(OPER
														{assem = "cdq #34\n",
														src = [rv,ov], dst = [rv,ov], jump=NONE});
														emit(OPER 
														{assem = "divl %`s0 #36\n", src = [munchExp e2, rv, ov], dst = [rv, ov], jump=NONE});
														emit (MOVE {assem = "movl %`s0, %`d0\n", src = rv, dst = r})))
						| munchExp(BINOP(AND, e1, e2)) = 
								result(fn r => (emit(MOVE
														{assem = "movl %`s0, %`d0 #37\n", src = munchExp e1, dst = r});
														emit(OPER 
													{assem = "andl %`s0, %`d0 #38\n", src = [munchExp e2, r], dst = [r], jump=NONE})))
						| munchExp(BINOP(OR, e1, e2)) = 
								result(fn r => (emit(MOVE 
														{assem = "movl %`s0, %`d0 #39\n", src = munchExp e1, dst = r});
														emit(OPER
														{assem = "orl %`s0, %`d0 #40\n", src = [munchExp e2, r], dst = [r], jump=NONE})))
						| munchExp(CONST i)=
								result (fn r => (emit(OPER
														{assem = "movl $"^itoa(i)^" , %`d0 #41\n",
															src = [], dst = [r], jump=NONE})))
						| munchExp(TEMP t) = t
						| munchExp(NAME l) = result (fn r => (emit(OPER 
																{assem = "movl $"^(labelAstring l)^" , %`d0 #42\n",
																	src = [], dst = [r], jump=NONE})))
						| munchExp _ = raise Fail "Error: munchExp incompleto"
						
			in munchStm stm;
				rev(!ilist)

	end

	
	fun impresor operacion = print (format tigertemp.tempAstring operacion)
	fun generador (l:tigercanon.fragCanon list) =
			let 		
				fun aux(tigercanon.CanonProc (cb, f)) =
							let
									val listaInstr = procEntryExit2(f, List.concat (List.map (fn x => codegen(f,x)) cb))
							in
								(tigertrans.nombreFrame f;
							 	(*List.app impresor listaInstr;
							  print("\nAhora empieza el assembler definitivo\n");*)
								List.app impresor (tigerreg.coloreo(f, listaInstr)))
							(*print "\n"*)
							end
							
				|aux(tigercanon.CanonString (l, s)) =  if ((labelAstring l) = ";;-------") then ()
																								else (if ((labelAstring l) = "") then () 
																												else print ((labelAstring l)^":"); print (s^"\n"))
			in 
				(List.map aux l;())
	end 


end

@


1.4
log
@Versión 1.4 de tigercodegen. En esta versión se corrigió la entrada #8 del generador de código. Existe un problema con la entrada #25, debido a que en numerosos casos coalesce con el ebp un registro.
.{
@
text
@d39 12
d167 1
a167 1
								result (fn r => (emit(MOVE 
d169 1
a169 1
															src = munchExp e1, dst=r});
d191 2
a192 2
														{assem = "cwq %`s0 #34\n",
														src = [rv], dst = [ov], jump=NONE});
d194 1
a194 1
														{assem = "divl %`s0 #36\n", src = [munchExp e2, rv], dst = [rv, ov], jump=NONE});
@


1.3
log
@Tercera versión de Tigercodegen. En esta versión el assembler tiene el número de match del munchExp. Además hice retoques en call exp, debido a que si hago push, no es necesario restar antes el %esp.
@
text
@d35 4
a38 1
						(* Aquí hay errores. *)
d40 3
a42 7
								emit(OPER {assem = "movl %`s0, "^itoa(i)^"(%`d0) #1\n",
															src = [munchExp e2], 
															dst = [munchExp e1], jump=NONE})
						| munchStm(tigertree.MOVE(MEM (BINOP (PLUS, CONST i, e1)), e2)) =
								emit(OPER {assem = "movl %`s0, "^itoa(i)^"(%`d0) #2\n",
															src = [munchExp e2],
															dst = [munchExp e1], jump=NONE})
d47 1
a47 1
										(emit(OPER {assem = "movl (%`s0), %`d0 #3\n",
d49 2
a50 2
										emit(OPER {assem = "movl %`s0, (%`d0) #4\n",
																src = [tmp], dst = [munchExp e1], jump=NONE})) 
d52 4
a55 3
						| munchStm(tigertree.MOVE (MEM(CONST i), e2)) =
								emit(OPER {assem = "movl %`s0,  "^itoa(i)^" #5\n" ,
														src= [munchExp e2], dst = [], jump=NONE})
d57 1
a57 1
								emit(OPER {assem = "movl %`s0, (%`s1) #6\n",
d61 1
a61 1
								emit(OPER {assem = "movl $"^itoa(i)^", %`d0 #7\n",
d63 6
a68 3
						| munchStm(tigertree.MOVE (TEMP r, TEMP t)) =
								emit(MOVE {assem = "movl %`s0, %`d0 #8\n",
														src = t, dst = r })
a72 3
						| munchStm(tigertree.MOVE (TEMP i, NAME l)) =
								emit(OPER {assem = "movl $"^labelAstring(l)^", %`d0 #10\n",
											src = [], dst =[i], jump = NONE})
d74 2
a75 6
							((*saveCallerSaves();
							emit(OPER {assem = "subl $"^itoa(List.length args * wSz)^" ,%esp #11\n",
										src = [], dst = callersaves, jump=NONE});
							En vez de que en el dst aparezca calldefs, coloco callersaves	*)
							emit(OPER {assem = "call "^labelAstring(n)^" #12\n",
										src = munchArgs((List.length args),  rev args), dst = calldefs, jump=NONE});
d77 3
a79 4
									emit(OPER {assem = "addl $"^itoa(List.length args * wSz)^" ,%esp #13\n",
												src = [], dst = [rv]@@callersaves, jump=NONE})
							else ()(*;
							restoreCallerSaves()*))
d81 2
a82 6
							((*saveCallerSaves();
							emit(OPER {assem = "subl $"^itoa(List.length args * wSz)^" ,%`d0 #14\n",
										src = [], dst = [sp], jump=NONE});
							En vez de que en el dst aparezca calldefs, coloco callersaves	*)
							emit(OPER {assem = "call %`s0 #15\n",
										src =munchExp e::munchArgs((List.length args),  rev args), dst = calldefs, jump=NONE});
d84 10
a93 21
									emit(OPER {assem = "addl $"^itoa(List.length args * wSz)^" ,%esp #16\n",
												src = [], dst = [rv]@@callersaves, jump=NONE})
							else ()(*;
							restoreCallerSaves()*))
						| munchStm(EXP e) =
							emit(MOVE {assem = "movl %`s0, %`d0 #17\n",
										src = munchExp e, dst = rv})
						| munchStm (JUMP ((NAME e),l)) =
							emit(OPER {assem = "jmp "^labelAstring(e)^" #18\n",
										src = [], dst = [], jump=SOME [e]})
						| munchStm (JUMP (e, l)) =
							emit(OPER {assem = "jmp %`s0 #19\n",
										src = [munchExp e], dst = [], jump=SOME [stringAlabel(tempAstring (munchExp e))]})
						| munchStm (CJUMP (relop, CONST e1, CONST e2, l1, l2)) =
							let val res = case relop of 
														EQ => e1 = e2 				| NE => e1 <> e2 
														| LT => e1 < e2 			| GT => e1 > e2
														| LE => e1 <= e2			| GE => e1 >= e2
														| ULT => e1 < e2 			| ULE => e1 <= e2
														| UGT => e1 > e2      | UGE => e1 >= e2
									val l = if res then l1 else l2
d95 2
a96 23
									emit(OPER {assem = "jmp "^labelAstring(l)^" #20\n",
												src = [], dst =[], jump=SOME [l]})
							end
						| munchStm (CJUMP (relop, CONST e1, e2, l1, l2))=
							let val () = emit(OPER{assem = "cmpl $"^itoa(e1)^", %`s0 #21\n",
													src = [munchExp e2], dst = [], jump=NONE})
							in
  								emit(OPER{assem = relOp(relop)^" "^labelAstring(l1)^" #22\n",
												src = [], dst = [], jump=SOME [l1, l2]})
							end 
						| munchStm (CJUMP (relop, e1, CONST	e2, l1, l2))=
							let val () = emit(OPER{assem = "cmpl $"^itoa(e2)^", %`s0 #23\n",
													src = [munchExp e1], dst = [], jump=NONE})
							in
  								emit(OPER{assem = relOp(relop)^" "^labelAstring(l1)^" #24\n",
												src = [], dst = [], jump=SOME [l1, l2]})
							end 
						| munchStm (CJUMP (relop, e1,	e2, l1, l2))=
							let val () = emit(OPER{assem = "cmpl %`s0, %`s1 #25\n",
													src = [munchExp e1, munchExp e2], dst = [], jump=NONE})
							in
  								emit(OPER{assem = relOp(relop)^" "^labelAstring(l1)^" #26\n",
												src = [], dst = [], jump=SOME [l1, l2]})
d99 1
a99 1
								emit (LABEL {assem = labelAstring(lab)^": #27\n", lab=lab}) 
d103 1
a103 1
								emit (OPER{assem = "pushl %`s0 #28\n",
d110 1
a110 1
								emit (OPER{assem = "popl %`s0 #29\n",
d119 6
a124 6
									TEMP t => (OPER{assem="pushl %`s0 #30\n", src=[t], dst=[], jump=NONE}, "")
										(*	(OPER {assem = "movl %`s0, "^itoa(i * wSz)^"(%`d0)\n",
														src = [t], dst = [sp], jump=NONE}, "") *)
									| CONST t => (OPER{assem="pushl $"^itoa(t)^" #31\n", src=[], dst=[], jump=NONE}, "") 
												(*(OPER {assem = "movl $"^itoa(t)^", "^itoa(i * wSz)^"(%`d0)\n",
														src = [], dst = [sp], jump=NONE}, "")*)
d127 2
a128 3

														(OPER {assem = "movl %`s0, "^itoa(i * wSz)^"(%`d0) #32\n",
														src =[e], dst = [sp], jump=NONE}, tempAstring e) 
d135 5
a139 22
						| munchExp(MEM(BINOP(PLUS, TEMP t0, BINOP(LSHIFT, TEMP t1, CONST i)))) = 
							if scaleFact i then
								result(fn r => (emit(MOVE{assem = "movl %`s0, %`d0 #33\n",
													dst = r, src = t1});
											emit(OPER{assem = "shl $"^itoa(sF i)^", %`d0 #34\n",
												dst = [r], src = [], jump=NONE});
											emit(OPER{assem = "movl %(`s0), %`d0 #35\n",
												dst = [t1], src = [r], jump=NONE})))

							else	result(fn r =>(emit(MOVE{assem = "movl %`s0, %`d0 #36\n",
													dst = r, src = t1});
											emit(OPER{assem = "shl $"^itoa(i)^", %`d0 #37\n",
												dst = [r], src = [], jump=NONE});
											emit(OPER{assem = "movl %(`s0), %`d0 #38\n",
												dst = [t1], src = [r], jump=NONE})))
						| munchExp(MEM(BINOP(PLUS, CONST i, CONST j)))=
								result(fn r => emit(OPER {assem = "movl "^itoa(i+j)^", %`d0 #39\n",
															src = [], dst = [r], jump=NONE}))
						| munchExp(MEM(BINOP(PLUS, e1, CONST i))) =
								result(fn r => emit(OPER {assem = "movl "^itoa(i)^"(%`s0), %`d0 #40\n",
															src = [munchExp e1], dst = [r], jump=NONE}))
						| munchExp(MEM(BINOP(PLUS, CONST i, e1))) =
d141 1
a141 9
														{assem = "movl "^itoa(i)^"(%`s0), %`d0 #41\n",
														 	src = [munchExp e1], dst =[r], jump=NONE}))
						| munchExp(MEM(BINOP(MINUS, e1, CONST i))) =
								result(fn r => emit(OPER 
														{assem = "movl -"^itoa(i)^"(%`s0), %`d0 #42\n",
															src = [munchExp e1], dst = [r], jump=NONE})) 
						| munchExp(MEM(BINOP(MINUS, CONST i, e1)))=
								result(fn r => emit(OPER
														{assem = "movl -"^itoa(i)^"(%`s0), %`d0 #43\n",
d143 4
a146 8
						| munchExp(MEM(CONST i)) =
								result(fn r => emit(OPER
														{assem = "movl  "^itoa(i)^" , `%d0 #44\n",
															src = [], dst =[r], jump=NONE}))
						| munchExp(MEM(e1)) =
								result(fn r => emit(MOVE 
														{assem = "movl (%`s0), %`d0 #45\n",
															src = munchExp e1, dst = r}))
a147 7
								result (fn r => (emit(MOVE	
														{assem = "movl %`s0, %`d0 #46\n",
 															src = munchExp e1, dst =r});
																emit(OPER
														{assem = "addl $"^itoa(i)^" ,%`d0 #47\n",
															src =[], dst =[r], jump=NONE})))
						| munchExp(BINOP(PLUS, CONST i, e1)) =
d149 2
a150 2
														{assem = "movl %`s0, %`d0 #48\n",
															src = munchExp e1, dst =r});
d152 1
a152 1
														{assem = "addl $"^itoa(i)^" , %`d0 #49\n",
d156 1
a156 1
														{assem = "movl %`s0, %`d0 #50\n",
d159 1
a159 1
														{assem = "addl %`s0, %`d0 #51\n",
a160 21
						| munchExp(BINOP(MINUS, CONST 0, e1)) = 
								result(fn r => (emit(OPER	
														{assem = "negl %`d0 #52\n", 
															src = [], dst = [munchExp e1], jump=NONE});
														emit(MOVE 
														{assem = "movl %`s0, %`d0 #53\n",
															src = munchExp e1, dst = r})))
						| munchExp(BINOP(MINUS, e1, CONST i)) =
								result(fn r => (emit(MOVE 
														{assem = "movl %`s0, %`d0 #54\n",
															src = munchExp e1, dst = r });
														emit(OPER		
														{assem = "subl $"^itoa(i)^" ,%`d0 #55\n",
															src = [], dst = [r], jump=NONE})))
						| munchExp(BINOP(MINUS, CONST i, e1))=
								result(fn r => (emit(OPER
														{assem = "movl $"^itoa(i)^" ,%`d0 #56\n",
															src = [], dst = [r], jump=NONE});
														emit(OPER
														{assem = "subl %`s0, %`d0 #57\n",
														src =[munchExp e1], dst = [r], jump=NONE})))
d163 1
a163 1
														{assem = "movl %`s0, %`d0 #58\n",
d166 1
a166 1
														{assem = "subl %`s0, %`d0 #59\n",
a167 6
						| munchExp(BINOP(MUL, CONST i, e1)) =
								result(fn r => (emit(OPER{assem="imul $"^itoa(i)^", %`s0, %`d0 #60\n",
														src = [munchExp e1], dst  = [r], jump=NONE})))
						| munchExp(BINOP(MUL, e1, CONST i)) =
								result(fn r => (emit(OPER{assem="imul $"^itoa(i)^", %`s0, %`d0 #61\n",
														src = [munchExp e1], dst = [r], jump=NONE})))
d170 1
a170 1
														{assem = "movl %`s0, %`d0 #62\n",
d172 1
a172 1
														emit(OPER{assem="imul %`s0, %`d0 #63\n",
a173 26
						| munchExp(BINOP(DIV, CONST i, e1)) = 
								result(fn r => (emit(OPER 
														{assem = "movl $"^itoa(i)^", %`d0 #64\n",
														src = [munchExp e1], dst = [rv], jump=NONE});
														emit(OPER 
														{assem = "cwq %`s0 #65\n",
														src = [rv], dst = [ov], jump=NONE});
 														emit(MOVE 
														{assem = "movl %`s0, %`d0 #66\n",
														src = munchExp e1 , dst = r});
														emit(OPER 
														{assem = "divl %`s0 #67\n", src = [r], dst = [rv, ov], jump=NONE});
														emit (MOVE {assem = "movl %`s0, %`d0 #68\n", src = rv, dst = r}))) 
						| munchExp(BINOP(DIV, e1, CONST i)) = 
								result(fn r => (emit(MOVE 
														{assem = "movl %`s0, %`d0 #69\n",
														src = munchExp e1, dst = rv});
														emit(OPER
														{assem = "cwq %`s0 #70\n",
														src = [rv], dst = [ov], jump=NONE});
 														emit(OPER 
														{assem = "movl $"^itoa(i)^", %`d0 #71\n",
														src = [],  dst = [r], jump=NONE});
														emit(OPER 
														{assem = "divl %`s0\n", src = [r], dst = [rv, ov], jump=NONE});
														emit(MOVE {assem = "movl %`s0, %`d0 #72\n", src = rv, dst = r}))) 
d176 1
a176 1
														{assem = "movl %`s0, %`d0 #73\n",
d179 1
a179 1
														{assem = "cwq %`s0 #74\n",
a180 3
 														emit(MOVE 
														{assem = "movl %`s0, %`d0 #75\n",
														src = munchExp e2,  dst = r});
d182 1
a182 1
														{assem = "divl %`s0 #76\n", src = [r], dst = [rv, ov], jump=NONE});
d186 1
a186 1
														{assem = "movl %`s0, %`d0 #77\n", src = munchExp e1, dst = r});
d188 1
a188 1
													{assem = "andl %`s0, %`d0 #78\n", src = [munchExp e2], dst = [r], jump=NONE})))
d191 1
a191 22
														{assem = "movl %`s0, %`d0 #79\n", src = munchExp e1, dst = r});
														emit(OPER
														{assem = "orl %`s0, %`d0 #80\n", src = [munchExp e2], dst = [r], jump=NONE})))
						(* Aquí hay un error. *)
						| munchExp(BINOP(LSHIFT, e1, CONST i)) =
								result(fn r =>(emit(MOVE 
														{assem = "movl %`s0, %`d0 #81\n", src = munchExp e1, dst = r});
														emit(OPER 
														{assem = "shl $"^itoa(i)^", %`d0 #82\n", src = [r], dst = [r], jump=NONE})))
						| munchExp(BINOP(RSHIFT, e1, e2)) =
								result(fn r =>(emit(MOVE 
														{assem = "movl %`s0, %`d0 #83\n", src = munchExp e2, dst = r});
														emit(OPER 
														{assem = "shr %`s0, %`d0 #84\n", src = [munchExp e1, r], dst = [r], jump=NONE})))
						| munchExp(BINOP(ARSHIFT, e1, e2)) =
								result(fn r => (emit(MOVE 
														{assem = "movl %`s0, %`d0 #85\n", src = munchExp e1, dst = r});
														emit(OPER
														{assem = "sar %`s0, %`d0 #86\n", src = [munchExp e2], dst = [r], jump=NONE})))
						| munchExp(BINOP(XOR, e1, e2)) =
								result(fn r =>(emit(MOVE
                          	{assem = "movl %`s0, %`d0 #87\n", src = munchExp e1, dst = r});
d193 1
a193 3
														{assem = "xorl %`s0, %`d0 #88\n", src = [munchExp e2, r], dst = [r], jump=NONE})))
						| munchExp(CALL (exp, explist))= 
								result(fn r => munchStm(EXP(CALL(exp, explist))))
d196 1
a196 1
														{assem = "movl $"^itoa(i)^" , %`d0\n #89",
d200 1
a200 1
																{assem = "movl $"^(labelAstring l)^" , %`d0 #90\n",
d220 2
a221 2
								List.app impresor (tigerreg.coloreo(f, listaInstr))
								(*print "\n"*))
@


1.2
log
@Segunda versión de Tigercodegen con agregados de mover constante a registro, y registro a registro.
@
text
@d37 1
a37 1
								emit(OPER {assem = "movl %`s0, "^itoa(i)^"(%`d0)\n",
d41 1
a41 1
								emit(OPER {assem = "movl %`s0, "^itoa(i)^"(%`d0)\n",
d48 1
a48 1
										(emit(OPER {assem = "movl (%`s0), %`d0\n",
d50 1
a50 1
										emit(OPER {assem = "movl %`s0, (%`d0)\n",
d54 1
a54 1
								emit(OPER {assem = "movl %`s0,  "^itoa(i)^"\n" ,
d57 1
a57 1
								emit(OPER {assem = "movl %`s0, (%`s1)\n",
d61 1
a61 1
								emit(OPER {assem = "movl $"^itoa(i)^", %`d0\n",
d64 1
a64 1
								emit(MOVE {assem = "movl %`s0, %`d0\n",
d67 3
a69 3
								emit(OPER {assem = "movl %`s0, %`d0\n",
														src = [munchExp e2],
														dst = [i], jump=NONE})
d71 1
a71 1
								emit(OPER {assem = "movl $"^labelAstring(l)^", %`d0\n",
d74 6
a79 6
							((*saveCallerSaves();*)
							emit(OPER {assem = "subl $"^itoa(List.length args * wSz)^" ,%`d0\n",
										src = [], dst = [sp], jump=NONE});
							(*En vez de que en el dst aparezca calldefs, coloco callersaves	*)
							emit(OPER {assem = "call "^labelAstring(n)^"\n",
										src = munchArgs((List.length args),  rev args), dst = callersaves, jump=NONE});
d81 2
a82 2
									emit(OPER {assem = "addl $"^itoa(List.length args * wSz)^" ,%`d0\n",
												src = [], dst = [sp], jump=NONE})
d86 2
a87 2
							((*saveCallerSaves();*)
							emit(OPER {assem = "subl $"^itoa(List.length args * wSz)^" ,%`d0\n",
d89 3
a91 3
							(*En vez de que en el dst aparezca calldefs, coloco callersaves	*)
							emit(OPER {assem = "call %`s0\n",
										src =munchExp e::munchArgs((List.length args),  rev args), dst = callersaves, jump=NONE});
d93 4
a96 4
									emit(OPER {assem = "addl $"^itoa(List.length args * wSz)^" ,%`d0\n",
												src = [], dst = [sp], jump=NONE})
							else ();
							restoreCallerSaves())
d98 1
a98 1
							emit(MOVE {assem = "movl %`s0, %`d0\n",
d101 1
a101 1
							emit(OPER {assem = "jmp "^labelAstring(e)^"\n",
d104 1
a104 1
							emit(OPER {assem = "jmp %`s0\n",
d115 1
a115 1
									emit(OPER {assem = "jmp "^labelAstring(l)^"\n",
d119 1
a119 1
							let val () = emit(OPER{assem = "cmpl $"^itoa(e1)^", %`s0 \n",
d122 1
a122 1
  								emit(OPER{assem = relOp(relop)^" "^labelAstring(l1)^" \n",
d126 1
a126 1
							let val () = emit(OPER{assem = "cmpl $"^itoa(e2)^", %`s0 \n",
d129 1
a129 1
  								emit(OPER{assem = relOp(relop)^" "^labelAstring(l1)^" \n",
d133 1
a133 1
							let val () = emit(OPER{assem = "cmpl %`s0, %`s1 \n",
d136 1
a136 1
  								emit(OPER{assem = relOp(relop)^" "^labelAstring(l1)^" \n",
d140 1
a140 1
								emit (LABEL {assem = labelAstring(lab)^": \n", lab=lab}) 
d144 1
a144 1
								emit (OPER{assem = "pushl %`s0\n",
d151 1
a151 1
								emit (OPER{assem = "popl %`s0\n",
d160 1
a160 1
									TEMP t => (OPER{assem="pushl %`s0\n", src=[t], dst=[], jump=NONE}, "")
d163 1
a163 1
									| CONST t => (OPER{assem="pushl $"^itoa(t)^"\n", src=[], dst=[], jump=NONE}, "") 
d169 1
a169 1
														(OPER {assem = "movl %`s0, "^itoa(i * wSz)^"(%`d0)\n",
d179 1
a179 1
								result(fn r => (emit(MOVE{assem = "movl %`s0, %`d0\n",
d181 1
a181 1
											emit(OPER{assem = "shl $"^itoa(sF i)^", %`d0\n",
d183 1
a183 1
											emit(OPER{assem = "movl %(`s0), %`d0\n",
d186 1
a186 1
							else	result(fn r =>(emit(MOVE{assem = "movl %`s0, %`d0\n",
d188 1
a188 1
											emit(OPER{assem = "shl $"^itoa(i)^", %`d0\n",
d190 1
a190 1
											emit(OPER{assem = "movl %(`s0), %`d0\n",
d193 1
a193 1
								result(fn r => emit(OPER {assem = "movl "^itoa(i+j)^", %`d0\n",
d196 1
a196 1
								result(fn r => emit(OPER {assem = "movl "^itoa(i)^"(%`s0), %`d0\n",
d200 1
a200 1
														{assem = "movl "^itoa(i)^"(%`s0), %`d0\n",
d204 1
a204 1
														{assem = "movl -"^itoa(i)^"(%`s0), %`d0\n",
d208 1
a208 1
														{assem = "movl -"^itoa(i)^"(%`s0), %`d0\n",
d212 1
a212 1
														{assem = "movl  "^itoa(i)^" , `%d0\n",
d215 3
a217 3
								result(fn r => emit(OPER 
														{assem = "movl (%`s0), %`d0\n",
															src = [munchExp e1], dst = [r], jump=NONE}))
d220 1
a220 1
														{assem = "movl %`s0, %`d0\n",
d223 1
a223 1
														{assem = "addl $"^itoa(i)^" ,%`d0\n",
d227 1
a227 1
														{assem = "movl %`s0, %`d0\n",
d230 1
a230 1
														{assem = "addl $"^itoa(i)^" , %`d0\n",
d234 1
a234 1
														{assem = "movl %`s0, %`d0\n",
d237 1
a237 1
														{assem = "addl %`s0, %`d0\n",
d241 1
a241 1
														{assem = "negl %`d0\n", 
d244 1
a244 1
														{assem = "movl %`s0, %`d0\n",
d248 1
a248 1
														{assem = "movl %`s0, %`d0\n",
d251 1
a251 1
														{assem = "subl $"^itoa(i)^" ,%`d0\n",
d255 1
a255 1
														{assem = "movl $"^itoa(i)^" ,%`d0\n",
d258 1
a258 1
														{assem = "subl %`s0, %`d0\n",
d262 1
a262 1
														{assem = "movl %`s0, %`d0\n",
d265 1
a265 1
														{assem = "subl %`s0, %`d0\n",
d268 1
a268 1
								result(fn r => (emit(OPER{assem="imul $"^itoa(i)^", %`s0, %`d0\n",
d271 1
a271 1
								result(fn r => (emit(OPER{assem="imul $"^itoa(i)^", %`s0, %`d0\n",
d275 1
a275 1
														{assem = "movl %`s0, %`d0\n",
d277 1
a277 1
														emit(OPER{assem="imul %`s0, %`d0\n",
d281 1
a281 1
														{assem = "movl $"^itoa(i)^", %`d0\n",
d284 1
a284 1
														{assem = "cwq %`s0\n",
d287 1
a287 1
														{assem = "movl %`s0, %`d0\n",
d290 2
a291 2
														{assem = "divl %`s0\n", src = [r], dst = [rv, ov], jump=NONE});
														emit (MOVE {assem = "movl %`s0, %`d0\n", src = rv, dst = r}))) 
d294 1
a294 1
														{assem = "movl %`s0, %`d0\n",
d297 1
a297 1
														{assem = "cwq %`s0\n",
d300 1
a300 1
														{assem = "movl $"^itoa(i)^", %`d0\n",
d304 1
a304 1
														emit(MOVE {assem = "movl %`s0, %`d0\n", src = rv, dst = r}))) 
d307 1
a307 1
														{assem = "movl %`s0, %`d0\n",
d310 1
a310 1
														{assem = "cwq %`s0\n",
d313 1
a313 1
														{assem = "movl %`s0, %`d0\n",
d316 1
a316 1
														{assem = "divl %`s0\n", src = [r], dst = [rv, ov], jump=NONE});
d320 1
a320 1
														{assem = "movl %`s0, %`d0\n", src = munchExp e1, dst = r});
d322 1
a322 1
													{assem = "andl %`s0, %`d0\n", src = [munchExp e2], dst = [r], jump=NONE})))
d325 1
a325 1
														{assem = "movl %`s0, %`d0\n", src = munchExp e1, dst = r});
d327 1
a327 1
														{assem = "orl %`s0, %`d0\n", src = [munchExp e2], dst = [r], jump=NONE})))
d331 1
a331 1
														{assem = "movl %`s0, %`d0\n", src = munchExp e1, dst = r});
d333 1
a333 1
														{assem = "shl $"^itoa(i)^", %`d0\n", src = [r], dst = [r], jump=NONE})))
d336 1
a336 1
														{assem = "movl %`s0, %`d0\n", src = munchExp e2, dst = r});
d338 1
a338 1
														{assem = "shr %`s0, %`d0\n", src = [munchExp e1, r], dst = [r], jump=NONE})))
d341 1
a341 1
														{assem = "movl %`s0, %`d0\n", src = munchExp e1, dst = r});
d343 1
a343 1
														{assem = "sar %`s0, %`d0\n", src = [munchExp e2], dst = [r], jump=NONE})))
d346 1
a346 1
                          	{assem = "movl %`s0, %`d0\n", src = munchExp e1, dst = r});
d348 1
a348 1
														{assem = "xorl %`s0, %`d0\n", src = [munchExp e2, r], dst = [r], jump=NONE})))
d353 1
a353 1
														{assem = "movl $"^itoa(i)^" , %`d0\n",
d357 1
a357 1
																{assem = "movl $"^(labelAstring l)^" , %`d0\n",
@


1.1
log
@Initial revision
@
text
@a8 1

d26 8
d35 1
d37 3
a39 3
								emit(OPER {assem = "movl %`s0, (%`s1 + "^itoa(i)^" )\n",
															src = [munchExp e2, munchExp e1], 
															dst = [], jump=NONE})
d41 3
a43 3
								emit(OPER {assem = "movl %`s0, (%`s1 + "^itoa(i)^" )\n",
															src = [munchExp e2, munchExp e1],
															dst = [], jump=NONE})
d48 4
a51 4
										(emit(MOVE {assem = "movl (%`s0), %`d0\n",
																src = munchExp e2, dst = tmp});
										emit(MOVE {assem = "movl %`s0, (%`d0)\n",
																src = tmp, dst = munchExp e1})) 
d54 1
a54 1
								emit(OPER {assem = "movl %`s0, ( "^itoa(i)^" )\n" ,
d60 6
d67 6
a72 3
								emit(MOVE {assem = "movl %`s0, %`d0\n",
														src = munchExp e2,
														dst = i})
d74 1
a74 1
							(saveCallerSaves();
d76 2
a77 1
										src = [], dst = [sp], jump=NONE});	
d79 1
a79 1
										src = munchArgs((List.length args),  rev args), dst = calldefs, jump=NONE});
d83 2
a84 2
							else ();
							restoreCallerSaves())
d86 1
a86 1
							(saveCallerSaves();
d88 2
a89 1
										src = [], dst = [sp], jump=NONE});	
d91 1
a91 1
										src =munchExp e::munchArgs((List.length args),  rev args), dst = calldefs, jump=NONE});
d119 1
a119 1
							let val () = emit(OPER{assem = "cmp %`s0, "^itoa(e1)^" \n",
d126 1
a126 1
							let val () = emit(OPER{assem = "cmp %`s0, "^itoa(e2)^" \n",
d133 1
a133 1
							let val () = emit(OPER{assem = "cmp %`s0, %`s1 \n",
d160 6
a165 4
									TEMP t => (MOVE {assem = "movl %`s0, "^itoa(i * wSz)^"(%`d0)\n",
														src = t, dst = sp}, "")
									| CONST t => (OPER {assem = "movl $"^itoa(t)^", "^itoa(i * wSz)^"(%`d0)\n",
														src = [], dst = [sp], jump=NONE}, "")
d168 3
a170 2
														(MOVE {assem = "movl %`s0, "^itoa(i * wSz)^"(%`d0)\n",
														src = e, dst = sp}, tempAstring e) 
d177 18
d196 2
a197 2
								result(fn r => emit(OPER {assem = "movl (%`s0 + "^itoa(i)^" ), %`d0\n",
																			src = [munchExp e1], dst =[r], jump=NONE}))
d200 1
a200 1
														{assem = "movl (%`s0 + "^itoa(i)^" ), %`d0\n",
d202 8
d217 1
a217 1
															src = [munchExp e1], dst =[r], jump=NONE}))
d239 7
d268 1
a268 1
							result(fn r => (emit(OPER{assem="imul %`s0 * $"^itoa(i)^", %`d0\n",
d271 1
a271 1
							result(fn r => (emit(OPER{assem="imul %`s0 * $"^itoa(i)^", %`d0\n",
d274 1
a274 1
							result(fn r => (emit(MOVE 
d277 1
a277 1
														emit(OPER{assem="imul %`s0, %d0\n",
d280 7
a286 1
							result(fn r => (emit(MOVE 
d288 1
a288 4
														src = munchExp e1, dst = rv});
 														emit(OPER 
														{assem = "movl $"^itoa(i)^", %`d0\n",
														src = [], dst = [r], jump=NONE});
d292 8
a299 2
						| munchExp(BINOP(DIV, CONST i, e1)) = 
							result(fn r => (emit(OPER 
d301 1
a301 4
														src = [], dst = [rv], jump =NONE});
 														emit(MOVE 
														{assem = "movl %`s0, %`d0\n",
														src = munchExp e1,  dst = r});
d306 1
a306 1
							result(fn r => (emit(MOVE 
d309 3
d319 1
a319 1
							result(fn r => (emit(MOVE
d324 1
a324 1
							result(fn r => (emit(MOVE 
d328 4
a331 3
						| munchExp(BINOP(LSHIFT, e1, e2)) =
							result(fn r =>(emit(MOVE 
														{assem = "movl %`s0, %`d0\n", src = munchExp e2, dst = r});
d333 1
a333 1
														{assem = "shl %`s0, `d0\n", src = [munchExp e1, r], dst = [r], jump=NONE})))
d335 1
a335 1
							result(fn r =>(emit(MOVE 
d340 1
a340 1
							result(fn r => (emit(MOVE 
d343 1
a343 1
														{assem = "rsa %`s0, %`d0\n", src = [munchExp e2], dst = [r], jump=NONE})))
d345 1
a345 1
							result(fn r =>(emit(MOVE
d350 1
a350 1
							result(fn r => munchStm(EXP(CALL(exp, explist))))
d356 4
a359 2
						| munchExp(NAME l) = stringAtemp (labelAstring l)
						| munchExp _ = raise Fail "¡MunchExp incompleto!"
d365 1
d371 8
a378 5
							let 
									val _ = print " \n________________________\n"
									val _ = print (name f)
									val _ = print " \n________________________\n"
							in List.app impresor (List.concat (List.map (fn x => codegen(f,x)) cb))
d380 4
a383 1
				|aux _ = ()
@
